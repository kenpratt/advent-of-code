Dec 24 notes:

For path, store:
- position
- path so far
- keys visited in order
- keys left to visit
- doors left to visit

For score: path length minus num keys and doors visited

For hueristic: Manhattan distance to furthest key/door?

Doors treated as inaccessible until have key.
- Factor into hueristic? I think no, just do path to furthest item, best path could happen to be through all doors.
- Maybe instead of Manhattan distance should do astar distance assuming all doors are open, though?

--
Dec 25 notes:

new idea -- manhattan distance through all remaining keys:
- find closest by manhattan distance, next closest, etc, and sum the distances.
- BUT this may not be guaranteed to be shortest path?? as it could zigzag. 
  - may need to run a sub-A* on shortest path through all points via manhattan distance :/

Alternate, basic idea:
- path to closest key + num of other remaining keys. Would incentivize going to closest key...

Add caching to my general A* pathfinding
- For the distance to key pathfinding...
- Cache by destination, keeping best found per location hash including intermediaries?
- Also could remove the path rebuilding and just return size.

Or maybe, just build a table or routes between all key pairs, including doors en route?
- Largest set is input with 26 keys, so 676 A* routes, should be fairly quick.
- Then it would be trivial to look up real distance between two keys and see if visitable
  by checking doors on route.
- This might make it easier to come up with a heuristic for shortest remaining path??
  - And also speed up the A*-including-keys check.

--
Dec 26 notes:

- Use a better heuristic for A* -- either minimum spanning tree (seems easier) or Held-Karp (seems complex).
  - For MST and maybe other algorithms, should I be ignoring nodes for which the path to them is through another node? At least for MST this would make sense...

- Or, could use Dijkstra's Algorithm. Seems like maybe a better fit given the descriptions.
  - Given the costs are small positive integers there's even an optimization. "When arc weights are small integers (bounded by a parameter C), a monotone priority queue can be used to speed up Dijkstra's algorithm"




def minimum_spanning_tree(tiles)
  # TODO but ignore edges that go through other keys...
  # cache set of edges between runs? maybe just a SortedSet, could add <=> to Route using distance.
end

# This is useless as an upper bound as it doesn't factor in doors...
# maybe I could modify it to do dynamic costs on the way??
# Unsure if that still holds as upper bound though...
# def nearest_neighbour(starting_tile, to_visit, distance_map)
#   distance = 0

#   from_tile = starting_tile
#   while to_visit.any?
#     to_tile = to_visit.min_by do |check_tile|
#       distance_map[from_tile][check_tile]
#     end
#     distance += distance_map[from_tile][to_tile]
#     to_visit.delete(to_tile)
#     from_tile = to_tile
#   end

#   distance + distance_map[to_tile][starting_tile]
# end


D, [2019-12-27T13:50:39.127051 #61227] DEBUG -- : Iteration 14600, 116 paths, first one size 112 with 14 collected keys
.

Finished in 10.083271s, 0.0992 runs/s, 0.0992 assertions/s.

1 runs, 1 assertions, 0 failures, 0 errors, 0 skips
bundle exec ruby day-18-many-worlds-interpretation/test.rb --name   10.47s user 0.17s system 99% cpu 10.679 total
